'File: CustomerManager.vb
'Created by: Padma Priya Duvvuri
'Created on: 10-Nov-2010

Option Strict On
Option Explicit On

Public Class CustomerManager
    'private arrayList to store the customer details
    Private customers As ArrayList
    'autogenerated id values
    Private m_idCounter As Integer

    ''' <summary>
    ''' default constructor. It creates a new arraylist object.
    ''' and it assigns default value of 101 for starters.
    ''' </summary>
    Public Sub New()
        customers = New ArrayList
        m_idCounter = 100
    End Sub

    ''' <summary>
    ''' It counts the number of customers objects that are 
    ''' present in the arraylist.
    ''' </summary>
    ''' <returns>no.of customers present</returns>
    Public ReadOnly Property Count As Integer
        Get
            Count = customers.Count
        End Get
    End Property


    ''' <summary>
    ''' It creates a new customer id for every customer 
    ''' present in the arraylist.
    ''' </summary>
    ''' <returns>new id for the new customer</returns>
    Public ReadOnly Property GetNewID As Integer
        Get
            GetNewID = m_idCounter + 1
        End Get
    End Property


    ''' <summary>
    ''' It stores the new customer details entered by the user, and returns
    ''' true if added.
    ''' </summary>
    ''' <param name="customerIn">Input - customer details</param>
    ''' <returns>True when the new customer is added</returns>
    Public Function AddCustomer(ByVal customerIn As Customer) As Boolean
        customerIn.ID = GetNewID.ToString()
        customers.Add(customerIn)
        Return True
    End Function


    ''' <summary>
    ''' validates the index of the array list.
    ''' </summary>
    ''' <param name="index">selected index</param>
    ''' <returns>true if index is less than the arraysize</returns>
    Private Function IsValidIndex(ByVal index As Integer) As Boolean
        If (index >= 0 And index < Count) Then
            Return True
        Else
            Return False
        End If
    End Function


    ''' <summary>
    ''' If the index is valid then it will allow the updation 
    ''' of the fields
    ''' </summary>
    ''' <param name="contactIn">details of selected customer</param>
    ''' <param name="index">selected index</param>
    ''' <returns>true if value is changed</returns>
    Public Function ChangeCustomer(ByVal contactIn As Contact, ByVal index As Integer) As Boolean
        If (IsValidIndex(index) = True) Then
            Dim customer As Customer = DirectCast(customers(index), Customer)
            customer.ContactData = contactIn
            customers.RemoveAt(index)
            customers.Insert(index, customer)
            Return True
        Else
            Return False
        End If
    End Function


    ''' <summary>
    ''' If index is valid then it will remove that customer 
    ''' from the arraylist.
    ''' </summary>
    ''' <param name="index">index at which customer need to be deleted</param>
    ''' <returns></returns>
    Public Function RemoveCustomer(ByVal index As Integer) As Boolean
        If (IsValidIndex(index) = True) Then
            customers.RemoveAt(index)
            Return True
        Else
            Return False
        End If
    End Function


    ''' <summary>
    ''' returns the customer object at the selected 
    ''' index of the customers arraylist
    ''' </summary>
    ''' <param name="index">selected index by the user</param>
    ''' <returns>customer object</returns>
    Public Function GetCustomer(ByVal index As Integer) As Customer
        Return DirectCast(customers(index), Customer)
    End Function

End Class
